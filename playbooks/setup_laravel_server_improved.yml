---
# Improved Laravel development environment setup playbook
# This playbook implements security best practices and modular architecture

- name: Laravel Development Environment Setup (Improved)
  hosts: localhost
  connection: local
  gather_facts: yes
  
  vars_files:
    - ../group_vars/all.yml
    - ../group_vars/vault.yml  # Encrypted with ansible-vault
  
  pre_tasks:
    - name: Display setup banner
      debug:
        msg: |
          Laravel Development Environment Setup
          ================================================================================
          Host: {{ ansible_hostname }}
          User: {{ ansible_user_id }}
          Started: {{ ansible_date_time.iso8601 }}
          ================================================================================
      tags: ['always']
    
    - name: Set current user context
      set_fact:
        current_user: "{{ lookup('env', 'SUDO_USER') | default(lookup('env', 'USER'), true) }}"
        setup_timestamp: "{{ ansible_date_time.epoch }}"
      tags: ['always']
    
    - name: Include input validation
      include_tasks: ../tasks/validation_simple.yml
      tags: ['validation']
    
    - name: Create setup log directory
      file:
        path: /var/log/laravel-setup
        state: directory
        owner: root
        group: root
        mode: '0755'
      become: yes
      tags: ['setup', 'logging']
  
  tasks:
    - name: Update system packages
      apt:
        update_cache: yes
        cache_valid_time: 3600
        upgrade: safe
      become: yes
      tags: ['system', 'packages']
      
    - name: Install essential system packages
      apt:
        name: "{{ essential_packages }}"
        state: present
      vars:
        essential_packages:
          - curl
          - wget
          - git
          - zip
          - unzip
          - acl
          - htop
          - vim
          - python3-pip
          - software-properties-common
          - apt-transport-https
          - ca-certificates
          - gnupg
          - lsb-release
          - cron
          - fail2ban  # Security enhancement
          - ufw       # Firewall
      become: yes
      tags: ['system', 'packages', 'security']
    
    - name: Configure basic firewall
      block:
        - name: Enable UFW
          ufw:
            state: enabled
            policy: deny
            direction: incoming
          become: yes
          
        - name: Allow SSH
          ufw:
            rule: allow
            port: '22'
            proto: tcp
          become: yes
          
        - name: Allow HTTP
          ufw:
            rule: allow
            port: '80'
            proto: tcp
          become: yes
          
        - name: Allow HTTPS
          ufw:
            rule: allow
            port: '443'
            proto: tcp
          become: yes
          
      tags: ['security', 'firewall']
      when: development_mode | default(true) | bool == false  # Only in production
    
    - name: Setup PHP environment
      include_role:
        name: php
      vars:
        php_versions: "{{ php_version_list | default(['8.3']) }}"
      tags: ['php']
    
    - name: Setup MySQL database
      include_role:
        name: mysql
      when: install_mysql | default(false) | bool
      tags: ['mysql', 'database']
    
    - name: Setup PostgreSQL database
      include_role:
        name: postgresql
      when: install_postgres | default(false) | bool
      tags: ['postgresql', 'database']
    
    - name: Install SQLite
      apt:
        name: sqlite3
        state: present
      become: yes
      when: install_sqlite | default(false) | bool
      tags: ['sqlite', 'database']
    
    - name: Install and configure Nginx web server
      include_role:
        name: nginx
      tags: ['nginx', 'webserver']
    
    - name: Install Node.js and npm
      block:
        - name: Add Node.js repository
          shell: curl -fsSL https://deb.nodesource.com/setup_{{ node_version }}.x | bash -
          become: yes
          
        - name: Install Node.js
          apt:
            name: nodejs
            state: present
            update_cache: yes
          become: yes
          
        - name: Install global npm packages
          npm:
            name: "{{ item }}"
            global: yes
          loop: "{{ npm_global_packages }}"
          become: yes
          
      tags: ['nodejs', 'npm']
    
    - name: Install Composer
      block:
        - name: Download Composer installer
          get_url:
            url: https://getcomposer.org/installer
            dest: /tmp/composer-setup.php
            mode: '0755'
            timeout: 30
          retries: 3
          delay: 10
          
        - name: Install Composer globally
          shell: php /tmp/composer-setup.php --install-dir=/usr/local/bin --filename=composer
          args:
            creates: /usr/local/bin/composer
          become: yes
          
        - name: Remove Composer installer
          file:
            path: /tmp/composer-setup.php
            state: absent
            
        - name: Verify Composer installation
          command: composer --version
          register: composer_version
          changed_when: false
          
      tags: ['composer', 'php']
    
    - name: Setup Adminer database manager
      include_role:
        name: adminer
      when: adminer_enabled | default(true) | bool
      tags: ['adminer', 'database']
    
    - name: Create sample Laravel site
      include_role:
        name: laravel_site
      vars:
        site_name: "{{ sample_site_name | default('laravel') }}"
        site_domain: "{{ sample_site_name | default('laravel') }}.local"
        git_repo: ""  # Create fresh Laravel project
        php_version: "{{ default_php_version }}"
      when: create_sample | default(false) | bool
      tags: ['laravel', 'sample']
  
  post_tasks:
    - name: Run health checks
      include_role:
        name: health_check
      vars:
        health_check_php_versions: "{{ php_version_list | default(['8.3']) }}"
      tags: ['health', 'verification']
    
    - name: Create system info file
      template:
        src: ../templates/server_info.j2
        dest: /var/www/html/server_info.php
        owner: www-data
        group: www-data
        mode: '0644'
      become: yes
      tags: ['info']
    
    - name: Log setup completion
      lineinfile:
        path: /var/log/laravel-setup/setup.log
        line: "{{ ansible_date_time.iso8601 }} - Laravel environment setup completed successfully by {{ current_user }}"
        create: yes
        owner: root
        group: root
        mode: '0644'
      become: yes
      tags: ['logging']
    
    - name: Display setup summary
      debug:
        msg: |
          Laravel Development Environment Setup Complete
          ================================================================================
          
          INSTALLED SERVICES:
          - PHP {{ php_version_list | join(', ') }} with FPM
          - Nginx web server
          {% if install_mysql | default(false) %}
          - MySQL database server
          {% endif %}
          {% if install_postgres | default(false) %}
          - PostgreSQL database server
          {% endif %}
          {% if install_sqlite | default(false) %}
          - SQLite database
          {% endif %}
          - Node.js {{ node_version }} with npm
          - Composer PHP package manager
          {% if adminer_enabled | default(true) %}
          - Adminer database manager
          {% endif %}
          
          ACCESS INFORMATION:
          {% if create_sample | default(false) %}
          - Sample Laravel site: http://{{ sample_site_name | default('laravel') }}.local/
          {% endif %}
          {% if adminer_enabled | default(true) %}
          - Database manager: http://db.{{ ansible_hostname }}.local:9000/
          {% endif %}
          - System information: http://{{ ansible_default_ipv4.address }}/server_info.php
          
          INSTALLATION DETAILS:
          - Completed: {{ ansible_date_time.iso8601 }}
          - User: {{ current_user }}
          - Log file: /var/log/laravel-setup/setup.log
          - Health report: /tmp/health_check_report.txt
          
          NEXT STEPS:
          1. Add required domains to your hosts file: /etc/hosts
          2. Create Laravel sites using: sudo ./laravel-site-manager create
          3. View site inventory: sudo ./laravel-site-inventory
          
          QUICK REFERENCE:
          - System health check: sudo ./laravel-env-installer --mode health
          - Site management: sudo ./laravel-site-manager --help
          - View logs: sudo tail -f /var/log/laravel-env/operations.log
          
          For documentation, see: README.md and NGINX_GUIDE.md
          ================================================================================
      tags: ['always']

  handlers:
    - name: restart nginx
      service:
        name: nginx
        state: restarted
      become: yes
      
    - name: restart mysql
      service:
        name: mysql
        state: restarted
      become: yes
      when: install_mysql | default(false) | bool
      
    - name: restart postgresql
      service:
        name: postgresql
        state: restarted
      become: yes
      when: install_postgres | default(false) | bool