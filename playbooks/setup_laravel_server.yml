---
# Playbook for setting up a Laravel development server locally

- name: Configure Laravel development environment
  hosts: localhost
  connection: local
  become: yes
  gather_facts: yes
  
  vars_prompt:
    - name: mysql_root_password
      prompt: "MySQL root password"
      private: yes
      
    - name: postgres_password
      prompt: "PostgreSQL postgres user password"
      private: yes
    
    - name: php_versions
      prompt: "PHP versions to install (space-separated, e.g., '8.1 8.2 8.3')"
      private: no
      default: "{{ php_versions | default('8.1') }}"
      
    - name: default_php_version
      prompt: "Default PHP version to use"
      private: no
      default: "{{ default_php_version | default('8.1') }}"
      
    - name: create_sample_site
      prompt: "Create a sample Laravel site? (yes/no)"
      private: no
      default: "no"
    
    - name: install_adminer
      prompt: "Install Adminer database manager? (yes/no)"
      private: no
      default: "yes"
    
    - name: adminer_password
      prompt: "Adminer admin password (leave blank to use default)"
      private: yes
      default: ""
  
  vars:
    # Set a flag to determine if sample site should be created
    create_sample: "{{ create_sample_site | lower == 'yes' }}"
    # Get current user for Laravel site creation
    current_user: "{{ lookup('env', 'SUDO_USER') | default(lookup('env', 'USER'), true) }}"
    # Parse PHP versions
    php_version_list: "{{ php_versions.split() }}"
    # Define sample site defaults
    sample_site_name: "laravel"
    sample_site_php_version: "{{ default_php_version }}"
    # Set Adminer flags
    install_adminer: "{{ install_adminer | default('yes') | lower }}"
    adminer_enabled: "{{ install_adminer == 'yes' }}"
    adminer_password_final: "{{ adminer_password | default('admin') }}"
      
  tasks:
    - name: Display current user
      debug:
        msg: "Setting up Laravel environment for user: {{ current_user }}"
    
    - name: Prompt for sample site details if creating one
      block:
        - name: Ask for sample site name
          pause:
            prompt: "Enter sample site name (URL will be this.local)"
            echo: yes
          register: sample_site_name_input
          when: create_sample
          
        - name: Set sample site name
          set_fact:
            sample_site_name: "{{ sample_site_name_input.user_input | default('laravel') }}"
          when: create_sample and sample_site_name_input.user_input is defined
          
        - name: Ask for sample site PHP version
          pause:
            prompt: "Enter PHP version for sample site"
            echo: yes
          register: sample_site_php_version_input
          when: create_sample
          
        - name: Set sample site PHP version
          set_fact:
            sample_site_php_version: "{{ sample_site_php_version_input.user_input | default(default_php_version) }}"
          when: create_sample and sample_site_php_version_input.user_input is defined
      when: create_sample
      
    - name: Update package cache
      apt:
        update_cache: yes
        cache_valid_time: 3600
      when: ansible_os_family == "Debian"
      
    - name: Install essential packages
      apt:
        name:
          - curl
          - wget
          - git
          - zip
          - unzip
          - acl
          - htop
          - vim
          - python3-pip
          - software-properties-common
          - apt-transport-https
          - ca-certificates
          - gnupg
          - lsb-release
          - cron
        state: present
      when: ansible_os_family == "Debian"
      
    # PHP Installation
    - name: Add PHP repository
      apt_repository:
        repo: ppa:ondrej/php
        state: present
      when: ansible_distribution == "Ubuntu"
    
    - name: Display PHP versions being installed
      debug:
        msg: "Installing PHP versions: {{ php_version_list | join(', ') }}"
      
    - name: Install all requested PHP versions
      block:
        - name: Install PHP and extensions for each version
          apt:
            name:
              - php{{ php_version }}
              - php{{ php_version }}-fpm
              - php{{ php_version }}-cli
              - php{{ php_version }}-common
              - php{{ php_version }}-mysql
              - php{{ php_version }}-pgsql
              - php{{ php_version }}-mbstring
              - php{{ php_version }}-xml
              - php{{ php_version }}-curl
              - php{{ php_version }}-zip
              - php{{ php_version }}-gd
              - php{{ php_version }}-intl
              - php{{ php_version }}-bcmath
              - php{{ php_version }}-soap
              - php{{ php_version }}-xdebug
              - php{{ php_version }}-redis
            state: present
          loop: "{{ php_version_list }}"
          loop_control:
            loop_var: php_version
          when: ansible_os_family == "Debian"
          
        - name: Set default PHP version alternative priority
          shell: update-alternatives --set php /usr/bin/php{{ default_php_version }}
          ignore_errors: yes
          
        - name: Configure PHP-FPM for better performance for each version
          lineinfile:
            path: /etc/php/{{ item.0 }}/fpm/pool.d/www.conf
            regexp: '^;?{{ item.1.key }} ='
            line: '{{ item.1.key }} = {{ item.1.value }}'
          loop: "{{ php_version_list | product([
              { 'key': 'pm.max_children', 'value': '50' },
              { 'key': 'pm.start_servers', 'value': '5' },
              { 'key': 'pm.min_spare_servers', 'value': '5' },
              { 'key': 'pm.max_spare_servers', 'value': '35' }
            ]) | list }}"
          loop_control:
            loop_var: item
          notify: "restart php{{ item.0 }}-fpm"
          
      when: php_version_list | length > 0
      
    # Nginx Installation
    - name: Install Nginx
      apt:
        name: nginx
        state: present
      when: ansible_os_family == "Debian"
      
    - name: Start and enable Nginx
      service:
        name: nginx
        state: started
        enabled: yes
        
    # Ensure cron is running
    - name: Start and enable cron service
      service:
        name: cron
        state: started
        enabled: yes
      when: ansible_os_family == "Debian"
      
    # MySQL Installation
    - name: Install MySQL
      apt:
        name:
          - mysql-server
          - mysql-client
        state: present
      when: ansible_os_family == "Debian"
      
    - name: Start and enable MySQL
      service:
        name: mysql
        state: started
        enabled: yes
        
    - name: Set MySQL root password
      mysql_user:
        name: root
        password: "{{ mysql_root_password }}"
        login_unix_socket: /var/run/mysqld/mysqld.sock
        host_all: yes
        state: present
      no_log: true
      
    - name: Create .my.cnf file for root
      copy:
        dest: /root/.my.cnf
        content: |
          [client]
          user=root
          password={{ mysql_root_password }}
        mode: '0600'
      no_log: true
      
    # PostgreSQL Installation
    - name: Install PostgreSQL
      apt:
        name:
          - postgresql
          - postgresql-contrib
          - libpq-dev
        state: present
      when: ansible_os_family == "Debian"
      
    - name: Start and enable PostgreSQL
      service:
        name: postgresql
        state: started
        enabled: yes
        
    - name: Set PostgreSQL postgres user password
      become: yes
      become_user: postgres
      postgresql_user:
        name: postgres
        password: "{{ postgres_password }}"
      no_log: true
      
    # Node.js Installation
    - name: Set Node.js version
      set_fact:
        node_version: "{{ node_version | default('18') }}"
      
    - name: Install Node.js repository 
      shell: curl -fsSL https://deb.nodesource.com/setup_{{ node_version }}.x | bash -
      when: ansible_os_family == "Debian"
      
    - name: Install Node.js
      apt:
        name: nodejs
        state: present
      when: ansible_os_family == "Debian"
      
    - name: Install npm packages globally
      npm:
        name: "{{ item }}"
        global: yes
      loop:
        - npm
        - yarn
        
    # Composer Installation
    - name: Download Composer installer
      get_url:
        url: https://getcomposer.org/installer
        dest: /tmp/composer-setup.php
        mode: '0755'
        
    - name: Install Composer globally
      shell: php /tmp/composer-setup.php --install-dir=/usr/local/bin --filename=composer
      args:
        creates: /usr/local/bin/composer
        
    - name: Remove Composer installer
      file:
        path: /tmp/composer-setup.php
        state: absent
        
    # Laravel setup
    - name: Setup Laravel development environment
      block:
        - name: Create web directory for Laravel site
          file:
            path: "/var/www/{{ sample_site_name }}"
            state: directory
            owner: "{{ current_user }}"
            group: www-data
            mode: '0755'
          
        - name: Install Laravel using Composer
          become: yes
          become_user: "{{ current_user }}"
          shell: composer create-project laravel/laravel /var/www/{{ sample_site_name }} --no-interaction
          args:
            creates: "/var/www/{{ sample_site_name }}/artisan"
          
        - name: Set proper permissions for Laravel directories
          file:
            path: "/var/www/{{ sample_site_name }}/{{ item }}"
            state: directory
            owner: "{{ current_user }}"
            group: www-data
            mode: '0775'
            recurse: yes
          loop:
            - storage
            - bootstrap/cache
          
        - name: Create Nginx server block for Laravel
          template:
            src: ../templates/laravel_nginx.j2
            dest: /etc/nginx/sites-available/{{ sample_site_name }}
            owner: root
            group: root
            mode: '0644'
          vars:
            server_name: "{{ sample_site_name }}.local"
            root_directory: "/var/www/{{ sample_site_name }}/public"
            php_version: "{{ sample_site_php_version }}"
          
        - name: Enable Nginx server block
          file:
            src: /etc/nginx/sites-available/{{ sample_site_name }}
            dest: /etc/nginx/sites-enabled/{{ sample_site_name }}
            state: link
          
        - name: Add hostname to /etc/hosts
          lineinfile:
            path: /etc/hosts
            line: "127.0.0.1 {{ sample_site_name }}.local"
            state: present
          
        - name: Restart Nginx
          service:
            name: nginx
            state: restarted
            
      when: create_sample
        
    # Get service status for summary
    - name: Get Nginx status
      command: systemctl is-active nginx
      register: nginx_status
      changed_when: false
      failed_when: false
      
    - name: Get MySQL status
      command: systemctl is-active mysql
      register: mysql_status
      changed_when: false
      failed_when: false
      
    - name: Get PostgreSQL status
      command: systemctl is-active postgresql
      register: postgresql_status
      changed_when: false
      failed_when: false
    
    - name: Get PHP-FPM status for each version
      command: "systemctl is-active php{{ php_version }}-fpm"
      register: php_status_results
      changed_when: false
      failed_when: false
      loop: "{{ php_version_list }}"
      loop_control:
        loop_var: php_version
      
    - name: Get server IP
      command: hostname -I
      register: server_ip
      changed_when: false
      
    # Install Adminer if requested
    - name: Generate password hash for Adminer
      shell: openssl passwd -apr1 "{{ adminer_password_final }}"
      register: adminer_password_hash_result
      when: adminer_enabled | bool
      no_log: true
      
    - name: Set password hash for Adminer
      set_fact:
        adminer_password_hash: "{{ adminer_password_hash_result.stdout }}"
      when: adminer_enabled | bool
      no_log: true
      
    - name: Install and configure Adminer
      include_role:
        name: adminer
      vars:
        adminer_domain: "db.{{ ansible_hostname }}.local"
        adminer_user: "admin"
        adminer_password_hash: "{{ adminer_password_hash }}"
        php_version: "{{ default_php_version }}"
      when: adminer_enabled | bool
      
    - name: Add Adminer domain to /etc/hosts
      lineinfile:
        path: /etc/hosts
        line: "127.0.0.1 db.{{ ansible_hostname }}.local"
        state: present
      when: adminer_enabled | bool
      
    # Set up server summary page
    - name: Set up server summary page
      template:
        src: ../templates/server_info.j2
        dest: /var/www/html/index.html
        owner: root
        group: root
        mode: '0644'
      vars:
        server_name: "{{ ansible_hostname }}"
        php_versions: "{{ php_version_list }}"
        default_php_version: "{{ default_php_version }}"
      
    # Display Adminer info in summary
    - name: Include Adminer info in summary if enabled
      set_fact:
        adminer_info: |
          
          🗄️ Database Management:
            - Adminer URL: http://db.{{ ansible_hostname }}.local/
            - Username: admin
            - Password: {{ adminer_password_final }}
      when: adminer_enabled | bool
      no_log: true
      
    - name: Include empty Adminer info if disabled
      set_fact:
        adminer_info: ""
      when: not adminer_enabled | bool
      
    # Display summary
    - name: Display environment summary with Adminer
      debug:
        msg: |
          
          📊 Environment Setup Summary:
          ====================================================
          🔧 Services Status:
            - Nginx: {{ nginx_status.stdout }}
            - MySQL: {{ mysql_status.stdout }}
            - PostgreSQL: {{ postgresql_status.stdout }}
            {% for result in php_status_results.results %}
            - PHP{{ php_version_list[loop.index0] }}-FPM: {{ result.stdout }}
            {% endfor %}
          
          🌐 Network Information:
            - Server IP: {{ server_ip.stdout.split()[0] }}
            - Web Port: 80 (HTTP)
            - MySQL Port: 3306
            - PostgreSQL Port: 5432
          {{ adminer_info }}
          {% if create_sample %}
          🚀 Sample Laravel Site:
            - Site: {{ sample_site_name }}
            - URL: http://{{ server_ip.stdout.split()[0] }}/
            - URL: http://{{ sample_site_name }}.local/ (add to your hosts file)
            - Path: /var/www/{{ sample_site_name }}/
            - PHP Version: {{ sample_site_php_version }}
          {% else %}
          ℹ️ No sample site was created during setup.
            - Run './setup-site.sh' to create a new Laravel site
          {% endif %}
          
          ====================================================
          Your Laravel development environment is ready!
      

  handlers:
    - name: restart nginx
      service:
        name: nginx
        state: restarted
    
    - name: restart php8.1-fpm
      service:
        name: php8.1-fpm
        state: restarted
        
    - name: restart php8.2-fpm
      service:
        name: php8.2-fpm
        state: restarted
        
    - name: restart php8.3-fpm
      service:
        name: php8.3-fpm
        state: restarted 