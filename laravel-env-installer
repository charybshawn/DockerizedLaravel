#!/bin/bash
# Laravel Development Environment Installer
# Version: 2.0
# Copyright: Laravel Development Environment Project
#
# This script provides a professional installation interface for the Laravel
# development environment using Ansible automation.

set -euo pipefail

# Get script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Source common functions
source "${SCRIPT_DIR}/lib/common_functions.sh"

# Configuration
readonly VERSION="2.0"
readonly PRODUCT_NAME="Laravel Development Environment"
readonly MIN_ANSIBLE_VERSION="2.9"
readonly SUPPORTED_OS=("ubuntu" "debian")
readonly CONFIG_DIR="${SCRIPT_DIR}/config"
readonly VAULT_FILE="${SCRIPT_DIR}/group_vars/vault.yml"

# Installation modes
readonly MODE_FULL="full"
readonly MODE_CUSTOM="custom"
readonly MODE_VALIDATE="validate"
readonly MODE_HEALTH="health"

# Display professional header
display_header() {
    cat << EOF
================================================================================
${PRODUCT_NAME} Installer
Version: ${VERSION}
Copyright (c) $(date +%Y) Laravel Development Environment Project
================================================================================

EOF
}

# Display usage information
display_usage() {
    cat << EOF
Usage: $(basename "$0") [OPTIONS]

OPTIONS:
    -m, --mode MODE         Installation mode (full|custom|validate|health)
    -c, --config FILE       Configuration file path
    -v, --verbose          Enable verbose output
    -q, --quiet            Minimal output (only major milestones and errors)
    -d, --dry-run          Perform dry run without making changes
    -h, --help             Display this help message
    --version              Display version information
    --check-only           Only perform pre-flight checks
    --skip-validation      Skip configuration validation
    --vault-password FILE  Path to vault password file

MODES:
    full                   Complete installation with all components
    custom                 Selective component installation
    validate               Validate existing installation
    health                 Perform health checks only

EXAMPLES:
    # Full installation
    sudo $(basename "$0") --mode full

    # Quiet installation (minimal output)
    sudo $(basename "$0") --mode full --quiet

    # Custom installation with specific configuration
    sudo $(basename "$0") --mode custom --config myconfig.yml

    # Validate existing installation
    sudo $(basename "$0") --mode validate

    # Check system health
    sudo $(basename "$0") --mode health

For more information, see the documentation at:
https://github.com/yourorg/laravel-dev-environment

EOF
}

# Parse command line arguments
parse_arguments() {
    local mode="$MODE_FULL"
    local config_file=""
    local verbose=false
    local quiet=false
    local dry_run=false
    local check_only=false
    local skip_validation=false
    local vault_password_file=""
    
    while [[ $# -gt 0 ]]; do
        case $1 in
            -m|--mode)
                mode="$2"
                shift 2
                ;;
            -c|--config)
                config_file="$2"
                shift 2
                ;;
            -v|--verbose)
                verbose=true
                LOG_LEVEL=$LOG_LEVEL_DEBUG
                shift
                ;;
            -q|--quiet)
                quiet=true
                LOG_LEVEL=$LOG_LEVEL_ERROR
                shift
                ;;
            -d|--dry-run)
                dry_run=true
                shift
                ;;
            -h|--help)
                display_usage
                exit 0
                ;;
            --version)
                echo "${PRODUCT_NAME} version ${VERSION}"
                exit 0
                ;;
            --check-only)
                check_only=true
                shift
                ;;
            --skip-validation)
                skip_validation=true
                shift
                ;;
            --vault-password)
                vault_password_file="$2"
                shift 2
                ;;
            *)
                print_status "ERROR" "Unknown option: $1"
                display_usage
                exit $EXIT_GENERAL_ERROR
                ;;
        esac
    done
    
    # Export variables for use in functions
    export INSTALL_MODE="$mode"
    export CONFIG_FILE="$config_file"
    export VERBOSE="$verbose"
    export QUIET="$quiet"
    export DRY_RUN="$dry_run"
    export CHECK_ONLY="$check_only"
    export SKIP_VALIDATION="$skip_validation"
    export VAULT_PASSWORD_FILE="$vault_password_file"
}

# Check if running as root
check_root_privileges() {
    log_info "Checking root privileges"
    
    if [[ $EUID -ne 0 ]]; then
        print_status "ERROR" "This installer must be run with root privileges"
        print_status "INFO" "Please run: sudo $(basename "$0") $*"
        exit $EXIT_PERMISSION_ERROR
    fi
    
    log_info "Root privileges confirmed"
}

# Verify operating system
verify_operating_system() {
    log_info "Verifying operating system compatibility"
    
    local os_id=""
    local os_version=""
    local os_pretty_name=""
    
    if [[ -f /etc/os-release ]]; then
        # Parse os-release without sourcing to avoid conflicts
        os_id=$(grep "^ID=" /etc/os-release | cut -d= -f2 | tr -d '"' | tr '[:upper:]' '[:lower:]')
        os_version=$(grep "^VERSION_ID=" /etc/os-release | cut -d= -f2 | tr -d '"')
        os_pretty_name=$(grep "^PRETTY_NAME=" /etc/os-release | cut -d= -f2 | tr -d '"')
    else
        handle_error $EXIT_GENERAL_ERROR "Unable to determine operating system"
    fi
    
    local supported=false
    for supported_os in "${SUPPORTED_OS[@]}"; do
        if [[ "$os_id" == "$supported_os" ]]; then
            supported=true
            break
        fi
    done
    
    if [[ "$supported" != true ]]; then
        handle_error $EXIT_GENERAL_ERROR "Unsupported operating system: ${os_id}. Supported: ${SUPPORTED_OS[*]}"
    fi
    
    log_info "Operating system verified: ${os_pretty_name}"
    print_status "SUCCESS" "Operating system: ${os_pretty_name}"
}

# Check system requirements
check_system_requirements() {
    print_status "PROGRESS" "Checking system requirements..."
    
    # Check CPU cores
    local cpu_cores=$(nproc)
    if [[ $cpu_cores -lt 2 ]]; then
        log_warn "System has only ${cpu_cores} CPU core(s). Recommended: 2 or more"
        print_status "WARNING" "Low CPU core count: ${cpu_cores}"
    fi
    
    # Check total memory
    local total_memory_gb=$(($(free -m | awk 'NR==2 {print $2}') / 1024))
    if [[ $total_memory_gb -lt 2 ]]; then
        handle_error $EXIT_RESOURCE_ERROR "Insufficient memory: ${total_memory_gb}GB. Minimum required: 2GB"
    fi
    
    # Check available disk space
    check_system_resources || handle_error $? "Resource check failed"
    
    print_status "SUCCESS" "System requirements verified"
}

# Install prerequisites
install_prerequisites() {
    print_status "MILESTONE" "Installing prerequisites..."
    
    local packages=(
        "software-properties-common"
        "apt-transport-https"
        "ca-certificates"
        "curl"
        "gnupg"
        "lsb-release"
        "python3"
        "python3-pip"
        "git"
    )
    
    log_info "Updating package cache"
    retry_with_backoff apt-get update -qq
    
    log_info "Installing prerequisite packages"
    retry_with_backoff apt-get install -y -qq "${packages[@]}"
    
    print_status "SUCCESS" "Prerequisites installed"
}

# Install Ansible
install_ansible() {
    print_status "MILESTONE" "Installing Ansible..."
    
    if command -v ansible &> /dev/null; then
        local ansible_version=$(ansible --version | head -n1 | awk '{print $2}')
        log_info "Ansible ${ansible_version} is already installed"
        
        # Version comparison
        if [[ "$(printf '%s\n' "$MIN_ANSIBLE_VERSION" "$ansible_version" | sort -V | head -n1)" != "$MIN_ANSIBLE_VERSION" ]]; then
            print_status "WARNING" "Ansible version ${ansible_version} is older than recommended ${MIN_ANSIBLE_VERSION}"
        else
            print_status "SUCCESS" "Ansible ${ansible_version} is installed"
            return 0
        fi
    fi
    
    print_status "PROGRESS" "Installing Ansible..."
    retry_with_backoff apt-get install -y ansible
    
    print_status "SUCCESS" "Ansible installed successfully"
}

# Setup Ansible vault
setup_ansible_vault() {
    print_status "MILESTONE" "Setting up Ansible vault..."
    
    if [[ -f "$VAULT_FILE" ]]; then
        print_status "INFO" "Ansible vault already exists"
        read -p "Do you want to recreate the vault? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            return 0
        fi
    fi
    
    # Generate secure passwords
    print_status "PROGRESS" "Generating secure passwords..."
    python3 "${SCRIPT_DIR}/scripts/generate_passwords.py" --silent
    
    # Create vault
    print_status "INFO" "Creating encrypted vault file..."
    if [[ -n "${VAULT_PASSWORD_FILE}" ]] && [[ -f "${VAULT_PASSWORD_FILE}" ]]; then
        ansible-vault create --vault-password-file="${VAULT_PASSWORD_FILE}" "$VAULT_FILE"
    else
        echo "Please enter a strong vault password (you will need this for future operations):"
        ansible-vault create "$VAULT_FILE"
    fi
    
    print_status "SUCCESS" "Ansible vault configured"
    log_audit "vault_setup" "ansible_vault" "success" "Vault created at ${VAULT_FILE}"
}

# Validate configuration
validate_installation_config() {
    if [[ "${SKIP_VALIDATION}" == true ]]; then
        log_info "Skipping configuration validation (--skip-validation flag)"
        return 0
    fi
    
    print_status "PROGRESS" "Validating configuration..."
    
    # Check for required configuration files
    local required_files=(
        "${SCRIPT_DIR}/ansible.cfg"
        "${SCRIPT_DIR}/inventory/hosts.yml"
        "${SCRIPT_DIR}/group_vars/all.yml"
    )
    
    for file in "${required_files[@]}"; do
        if [[ ! -f "$file" ]]; then
            handle_error $EXIT_VALIDATION_ERROR "Required configuration file missing: ${file}"
        fi
        validate_configuration "$file" || handle_error $? "Configuration validation failed for: ${file}"
    done
    
    print_status "SUCCESS" "Configuration validated"
}

# Pre-flight checks
run_preflight_checks() {
    print_status "INFO" "Running pre-flight checks..."
    
    local checks=(
        "check_root_privileges"
        "verify_operating_system"
        "check_system_requirements"
        "validate_installation_config"
    )
    
    local total=${#checks[@]}
    local current=0
    
    for check in "${checks[@]}"; do
        current=$((current + 1))
        show_progress $current $total "Running ${check}"
        $check || handle_error $? "Pre-flight check failed: ${check}"
    done
    
    print_status "SUCCESS" "All pre-flight checks passed"
    log_info "Pre-flight checks completed successfully"
}

# Run full installation
run_full_installation() {
    print_status "INFO" "Starting full installation of ${PRODUCT_NAME}"
    log_audit "installation_start" "full_installation" "initiated" "Mode: ${INSTALL_MODE}"
    
    # Acquire installation lock
    if ! acquire_lock "installation" 300; then
        handle_error $EXIT_GENERAL_ERROR "Another installation is already in progress"
    fi
    
    # Install prerequisites
    install_prerequisites
    install_ansible
    setup_ansible_vault
    
    # Run Ansible playbook
    print_status "MILESTONE" "Installing Laravel environment..."
    
    local ansible_args=()
    if [[ -n "${VAULT_PASSWORD_FILE}" ]] && [[ -f "${VAULT_PASSWORD_FILE}" ]]; then
        ansible_args+=("--vault-password-file=${VAULT_PASSWORD_FILE}")
    else
        ansible_args+=("--ask-vault-pass")
    fi
    
    if [[ "${VERBOSE}" == true ]]; then
        ansible_args+=("-vvv")
    elif [[ "${QUIET}" == true ]]; then
        ansible_args+=("--quiet")
    fi
    
    if [[ "${DRY_RUN}" == true ]]; then
        ansible_args+=("--check")
    fi
    
    if ! ansible-playbook "${ansible_args[@]}" \
         "${SCRIPT_DIR}/playbooks/setup_laravel_server_improved.yml"; then
        handle_error $EXIT_GENERAL_ERROR "Ansible playbook execution failed"
    fi
    
    # Release lock
    release_lock "installation"
    
    print_status "SUCCESS" "Installation completed successfully"
    log_audit "installation_complete" "full_installation" "success" "All components installed"
    
    # Display post-installation information
    display_post_installation_info
}

# Run custom installation
run_custom_installation() {
    print_status "INFO" "Starting custom installation"
    
    # Display available components
    cat << EOF

Available Components:
---------------------
1. System packages and configuration
2. PHP and extensions
3. MySQL database server
4. PostgreSQL database server
5. SQLite database
6. Nginx web server
7. Node.js and npm
8. Composer package manager
9. Adminer database manager
10. Sample Laravel application

EOF
    
    read -p "Enter component numbers to install (space-separated): " -a components
    
    # Map components to Ansible tags
    local tags=()
    for component in "${components[@]}"; do
        case $component in
            1) tags+=("system") ;;
            2) tags+=("php") ;;
            3) tags+=("mysql") ;;
            4) tags+=("postgresql") ;;
            5) tags+=("sqlite") ;;
            6) tags+=("nginx") ;;
            7) tags+=("nodejs") ;;
            8) tags+=("composer") ;;
            9) tags+=("adminer") ;;
            10) tags+=("laravel") ;;
            *) print_status "WARNING" "Unknown component: ${component}" ;;
        esac
    done
    
    if [[ ${#tags[@]} -eq 0 ]]; then
        print_status "ERROR" "No valid components selected"
        exit $EXIT_GENERAL_ERROR
    fi
    
    print_status "INFO" "Installing components: ${tags[*]}"
    
    # Run Ansible with selected tags
    local ansible_args=("--tags" "$(IFS=,; echo "${tags[*]}")")
    if [[ -n "${VAULT_PASSWORD_FILE}" ]] && [[ -f "${VAULT_PASSWORD_FILE}" ]]; then
        ansible_args+=("--vault-password-file=${VAULT_PASSWORD_FILE}")
    else
        ansible_args+=("--ask-vault-pass")
    fi
    
    ansible-playbook "${ansible_args[@]}" \
        "${SCRIPT_DIR}/playbooks/setup_laravel_server_improved.yml"
}

# Run health checks
run_health_checks() {
    print_status "INFO" "Running system health checks..."
    
    ansible-playbook --tags health \
        "${SCRIPT_DIR}/playbooks/setup_laravel_server_improved.yml"
    
    # Display health report
    if [[ -f "/tmp/health_check_report.txt" ]]; then
        print_status "INFO" "Health Check Report:"
        cat "/tmp/health_check_report.txt"
    fi
}

# Display post-installation information
display_post_installation_info() {
    cat << EOF

================================================================================
Installation Complete
================================================================================

The ${PRODUCT_NAME} has been successfully installed.

Key Information:
----------------
- Installation Log: ${LOG_FILE}
- Configuration Directory: ${CONFIG_DIR}
- Site Information: /var/lib/nginx/sites/
- Documentation: ${SCRIPT_DIR}/NGINX_GUIDE.md

Quick Start Commands:
--------------------
1. Create a new Laravel site:
   sudo ${SCRIPT_DIR}/laravel-site-manager create

2. List all configured sites:
   sudo ${SCRIPT_DIR}/laravel-site-inventory

3. Check system health:
   sudo ${0} --mode health

4. View installation summary:
   cat /var/lib/nginx/sites/installation_summary.txt

Security Notes:
--------------
- Remember to secure your vault password
- Review security settings in ${CONFIG_DIR}/security/
- Enable firewall rules for production use
- Regularly update system packages

For support and documentation, visit:
https://github.com/yourorg/laravel-dev-environment

================================================================================

EOF
}

# Main function
main() {
    # Display header
    display_header
    
    # Parse arguments
    parse_arguments "$@"
    
    # Initialize logging
    log_info "Starting ${PRODUCT_NAME} installer version ${VERSION}"
    log_info "Installation mode: ${INSTALL_MODE}"
    
    # Run pre-flight checks
    if [[ "${CHECK_ONLY}" != true ]]; then
        run_preflight_checks
    else
        run_preflight_checks
        print_status "INFO" "Pre-flight checks completed. Exiting (--check-only mode)"
        exit 0
    fi
    
    # Execute based on mode
    case "${INSTALL_MODE}" in
        "$MODE_FULL")
            run_full_installation
            ;;
        "$MODE_CUSTOM")
            run_custom_installation
            ;;
        "$MODE_VALIDATE")
            validate_installation_config
            print_status "SUCCESS" "Validation completed"
            ;;
        "$MODE_HEALTH")
            run_health_checks
            ;;
        *)
            handle_error $EXIT_GENERAL_ERROR "Invalid installation mode: ${INSTALL_MODE}"
            ;;
    esac
    
    log_info "Installation process completed"
}

# Execute main function
main "$@"