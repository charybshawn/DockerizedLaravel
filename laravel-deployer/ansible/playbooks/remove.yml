---
- name: Remove Laravel Site
  hosts: webservers
  become: yes
  gather_facts: yes

  vars:
    # Required variables (must be provided via -e)
    # site_name: ""
    
    # Optional variables with defaults
    keep_database: "{{ keep_database | default(false) }}"
    keep_files: "{{ keep_files | default(false) }}"
    force_remove: "{{ force_remove | default(false) }}"
    
    # Derived variables
    site_path: "{{ web_root }}/{{ site_name }}"
    backup_timestamp: "{{ ansible_date_time.year }}{{ ansible_date_time.month }}{{ ansible_date_time.day }}_{{ ansible_date_time.hour }}{{ ansible_date_time.minute }}{{ ansible_date_time.second }}"
    backup_dir: "{{ backup_path }}/{{ site_name }}_backup_{{ backup_timestamp }}"

  pre_tasks:
    - name: Validate required variables
      fail:
        msg: "Required variable 'site_name' is not defined"
      when: site_name is not defined or site_name == ""

    - name: Check if site exists
      stat:
        path: "{{ site_path }}"
      register: site_directory_exists

    - name: Check if Nginx config exists
      stat:
        path: "{{ nginx_sites_available }}/{{ site_name }}"
      register: nginx_config_exists

    - name: Fail if site does not exist
      fail:
        msg: "Site '{{ site_name }}' does not exist"
      when: not site_directory_exists.stat.exists and not nginx_config_exists.stat.exists

    - name: List available sites for reference
      find:
        paths: "{{ web_root }}"
        file_type: directory
        depth: 1
      register: available_sites
      when: site_directory_exists.stat.exists

    - name: Display available sites
      debug:
        msg: "Available sites: {{ available_sites.files | map(attribute='path') | map('basename') | list }}"
      when: available_sites is defined

    - name: Confirm removal (interactive check)
      pause:
        prompt: |
          WARNING: This will remove the following for site '{{ site_name }}':
          - Nginx configuration
          {% if not keep_files %}
          - Website files in {{ site_path }}
          {% endif %}
          {% if not keep_database %}
          - Database and user
          {% endif %}
          {% if keep_files %}
          - Files will be backed up to {{ backup_dir }}
          {% endif %}
          
          Are you sure you want to continue? (yes/no)
      register: confirm_removal
      when: not force_remove

    - name: Validate confirmation
      fail:
        msg: "Removal cancelled by user"
      when: not force_remove and (confirm_removal.user_input | lower != 'yes')

  tasks:
    - name: Create backup directory if keeping files
      file:
        path: "{{ backup_dir }}"
        state: directory
        mode: '0755'
      when: keep_files and site_directory_exists.stat.exists

    - name: Backup website files
      synchronize:
        src: "{{ site_path }}/"
        dest: "{{ backup_dir }}/"
        delete: no
        recursive: yes
      delegate_to: "{{ inventory_hostname }}"
      when: keep_files and site_directory_exists.stat.exists

    - name: Remove Nginx site from sites-enabled
      file:
        path: "{{ nginx_sites_enabled }}/{{ site_name }}"
        state: absent
      notify: reload nginx

    - name: Remove Nginx site configuration
      file:
        path: "{{ nginx_sites_available }}/{{ site_name }}"
        state: absent
      notify: reload nginx

    - name: Test Nginx configuration
      command: nginx -t
      changed_when: false
      failed_when: false
      register: nginx_test

    - name: Warning about Nginx configuration
      debug:
        msg: "WARNING: Nginx configuration test failed - manual intervention may be needed"
      when: nginx_test.rc != 0

    - name: Remove website files
      file:
        path: "{{ site_path }}"
        state: absent
      when: site_directory_exists.stat.exists

    - name: Check if database exists
      shell: mysql -e "SHOW DATABASES LIKE '{{ site_name }}'"
      register: db_exists
      changed_when: false
      failed_when: false
      when: not keep_database

    - name: Remove database
      mysql_db:
        name: "{{ site_name }}"
        state: absent
      when: not keep_database and db_exists.stdout_lines | length > 1
      ignore_errors: yes

    - name: Check if database user exists
      shell: mysql -e "SELECT User FROM mysql.user WHERE User='{{ site_name }}'"
      register: user_exists
      changed_when: false
      failed_when: false
      when: not keep_database

    - name: Remove database user
      mysql_user:
        name: "{{ site_name }}"
        host: localhost
        state: absent
      when: not keep_database and user_exists.stdout_lines | length > 1
      ignore_errors: yes

    - name: Flush MySQL privileges
      shell: mysql -e "FLUSH PRIVILEGES"
      when: not keep_database
      ignore_errors: yes

    - name: Remove Nginx log files
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - "/var/log/nginx/{{ site_name }}_access.log"
        - "/var/log/nginx/{{ site_name }}_error.log"
      ignore_errors: yes

    - name: Find and remove rotated log files
      find:
        paths: /var/log/nginx
        patterns: "{{ site_name }}_*.log*"
      register: log_files

    - name: Remove found log files
      file:
        path: "{{ item.path }}"
        state: absent
      loop: "{{ log_files.files }}"
      ignore_errors: yes

    - name: Display removal summary
      debug:
        msg:
          - "Laravel site '{{ site_name }}' removed successfully!"
          - "{% if keep_files %}Files backed up to: {{ backup_dir }}{% else %}Website files: DELETED{% endif %}"
          - "{% if keep_database %}Database: PRESERVED{% else %}Database: DELETED{% endif %}"
          - "Nginx configuration: REMOVED"
          - "Log files: REMOVED"

  handlers:
    - name: reload nginx
      service:
        name: nginx
        state: reloaded