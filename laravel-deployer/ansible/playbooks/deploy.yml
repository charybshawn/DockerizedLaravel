---
- name: Deploy Laravel Site
  hosts: webservers
  become: yes
  gather_facts: yes

  vars:
    # Required variables (must be provided via -e)
    # site_name: ""
    # domain: ""
    # github_repo: ""
    
    # Optional variables with defaults
    github_branch: "{{ github_branch | default('main') }}"
    database_name: "{{ database_name | default(site_name) }}"
    database_user: "{{ database_user | default(site_name) }}"
    database_password: "{{ database_password | default(lookup('password', '/tmp/ansible_db_pass_' + site_name + ' chars=ascii_letters,digits length=16')) }}"
    ssl_enabled: "{{ ssl_enabled | default(false) }}"
    force_deploy: "{{ force_deploy | default(false) }}"
    releases_to_keep: "{{ releases_to_keep | default(5) }}"
    app_env: "{{ app_env | default('production') }}"
    app_debug: "{{ app_debug | default('false') }}"
    
    # Derived variables
    site_path: "{{ web_root }}/{{ site_name }}"
    current_path: "{{ site_path }}/current"
    shared_path: "{{ site_path }}/shared"
    releases_path: "{{ site_path }}/releases"
    release_name: "{{ ansible_date_time.year }}{{ ansible_date_time.month }}{{ ansible_date_time.day }}_{{ ansible_date_time.hour }}{{ ansible_date_time.minute }}{{ ansible_date_time.second }}"
    release_path: "{{ releases_path }}/{{ release_name }}"

  pre_tasks:
    - name: Validate required variables
      fail:
        msg: "Required variable {{ item }} is not defined"
      when: vars[item] is not defined or vars[item] == ""
      loop:
        - site_name
        - domain
        - github_repo

    - name: Validate site name format
      fail:
        msg: "Site name must contain only alphanumeric characters and underscores"
      when: site_name | regex_search('[^a-zA-Z0-9_]')

    - name: Check if site exists
      stat:
        path: "{{ site_path }}"
      register: site_exists

    - name: Fail if site exists and force_deploy is false
      fail:
        msg: "Site '{{ site_name }}' already exists. Use force_deploy=true to overwrite."
      when: site_exists.stat.exists and not force_deploy

  tasks:
    - name: Create site directory structure
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ nginx_user }}"
        group: "{{ nginx_group }}"
        mode: '0755'
      loop:
        - "{{ site_path }}"
        - "{{ shared_path }}"
        - "{{ shared_path }}/storage"
        - "{{ shared_path }}/storage/app"
        - "{{ shared_path }}/storage/framework"
        - "{{ shared_path }}/storage/framework/cache"
        - "{{ shared_path }}/storage/framework/sessions"
        - "{{ shared_path }}/storage/framework/views"
        - "{{ shared_path }}/storage/logs"
        - "{{ releases_path }}"

    - name: Clone repository to release directory
      git:
        repo: "{{ github_repo }}"
        dest: "{{ release_path }}"
        version: "{{ github_branch }}"
        force: yes
      become_user: "{{ nginx_user }}"

    - name: Create database
      mysql_db:
        name: "{{ database_name }}"
        charset: "{{ default_database_charset }}"
        collation: "{{ default_database_collation }}"
        state: present
      ignore_errors: yes

    - name: Create database user
      mysql_user:
        name: "{{ database_user }}"
        password: "{{ database_password }}"
        priv: "{{ database_name }}.*:ALL"
        host: localhost
        state: present
      ignore_errors: yes

    - name: Generate Laravel application key if not exists
      shell: |
        if [ ! -f "{{ shared_path }}/.env" ] || ! grep -q "APP_KEY=" "{{ shared_path }}/.env" || grep -q "APP_KEY=$" "{{ shared_path }}/.env"; then
          cd "{{ release_path }}" && sudo -u {{ nginx_user }} php artisan key:generate --show
        else
          grep "APP_KEY=" "{{ shared_path }}/.env" | cut -d'=' -f2
        fi
      register: app_key_result
      changed_when: false

    - name: Set app_key variable
      set_fact:
        app_key: "{{ app_key_result.stdout }}"

    - name: Create .env file from template
      template:
        src: env.j2
        dest: "{{ shared_path }}/.env"
        owner: "{{ nginx_user }}"
        group: "{{ nginx_group }}"
        mode: '0644'

    - name: Link shared .env file
      file:
        src: "{{ shared_path }}/.env"
        dest: "{{ release_path }}/.env"
        state: link
        owner: "{{ nginx_user }}"
        group: "{{ nginx_group }}"

    - name: Link shared storage directory
      file:
        src: "{{ shared_path }}/storage"
        dest: "{{ release_path }}/storage"
        state: link
        owner: "{{ nginx_user }}"
        group: "{{ nginx_group }}"
      ignore_errors: yes

    - name: Install Composer dependencies
      composer:
        command: install
        working_dir: "{{ release_path }}"
        no_dev: yes
        optimize_autoloader: yes
      become_user: "{{ nginx_user }}"

    - name: Set proper permissions
      file:
        path: "{{ release_path }}"
        owner: "{{ nginx_user }}"
        group: "{{ nginx_group }}"
        recurse: yes
        mode: u=rwX,g=rX,o=rX

    - name: Set storage permissions
      file:
        path: "{{ shared_path }}/storage"
        owner: "{{ nginx_user }}"
        group: "{{ nginx_group }}"
        recurse: yes
        mode: '0775'

    - name: Run database migrations
      shell: cd "{{ release_path }}" && sudo -u {{ nginx_user }} php artisan migrate --force
      ignore_errors: yes

    - name: Cache Laravel configuration
      shell: |
        cd "{{ release_path }}"
        sudo -u {{ nginx_user }} php artisan config:cache
        sudo -u {{ nginx_user }} php artisan route:cache
        sudo -u {{ nginx_user }} php artisan view:cache
      ignore_errors: yes

    - name: Create Nginx site configuration
      template:
        src: nginx-site.conf.j2
        dest: "{{ nginx_sites_available }}/{{ site_name }}"
        mode: '0644'
      notify: restart nginx

    - name: Enable Nginx site
      file:
        src: "{{ nginx_sites_available }}/{{ site_name }}"
        dest: "{{ nginx_sites_enabled }}/{{ site_name }}"
        state: link
      notify: restart nginx

    - name: Test Nginx configuration
      command: nginx -t
      changed_when: false

    - name: Update current symlink
      file:
        src: "{{ release_path }}"
        dest: "{{ current_path }}"
        state: link
        owner: "{{ nginx_user }}"
        group: "{{ nginx_group }}"

    - name: Clean up old releases
      shell: |
        cd "{{ releases_path }}"
        ls -t | tail -n +{{ releases_to_keep + 1 }} | xargs rm -rf
      when: releases_to_keep | int > 0

    - name: Display deployment information
      debug:
        msg:
          - "Laravel site '{{ site_name }}' deployed successfully!"
          - "Domain: {{ domain }}"
          - "Document root: {{ current_path }}/public"
          - "Database: {{ database_name }}"
          - "Database user: {{ database_user }}"
          - "Branch: {{ github_branch }}"
          - "Release: {{ release_name }}"

  handlers:
    - name: restart nginx
      service:
        name: nginx
        state: reloaded