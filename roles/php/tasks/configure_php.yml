---
# PHP configuration task for a specific version and SAPI

- name: Create PHP configuration directory
  file:
    path: "/etc/php/{{ php_version }}/{{ php_sapi }}"
    state: directory
    owner: root
    group: root
    mode: '0755'
  become: yes

- name: Check if php.ini exists
  stat:
    path: "/etc/php/{{ php_version }}/{{ php_sapi }}/php.ini"
  register: php_ini_exists

- name: Copy php.ini template if it doesn't exist
  copy:
    src: "/usr/lib/php/{{ php_version }}/php.ini-production"
    dest: "/etc/php/{{ php_version }}/{{ php_sapi }}/php.ini"
    remote_src: yes
    owner: root
    group: root
    mode: '0644'
  when: not php_ini_exists.stat.exists
  become: yes

- name: Configure PHP settings
  lineinfile:
    path: "/etc/php/{{ php_version }}/{{ php_sapi }}/php.ini"
    regexp: "^{{ item.key }}\\s*="
    line: "{{ item.key }} = {{ item.value }}"
    backup: yes
  loop: "{{ php_settings | dict2items }}"
  become: yes
  notify:
    - restart php-fpm services

- name: Configure PHP development settings
  lineinfile:
    path: "/etc/php/{{ php_version }}/{{ php_sapi }}/php.ini"
    regexp: "^{{ item.key }}\\s*="
    line: "{{ item.key }} = {{ item.value }}"
    backup: yes
  loop: "{{ php_development_settings | dict2items }}"
  when: development_mode | default(true) | bool
  become: yes
  notify:
    - restart php-fpm services

- name: Enable core PHP extensions
  lineinfile:
    path: "/etc/php/{{ php_version }}/{{ php_sapi }}/php.ini"
    regexp: "^;?extension={{ item }}"
    line: "extension={{ item }}"
    backup: yes
  loop:
    - mbstring
    - iconv
  become: yes
  notify:
    - restart php-fpm services

- name: Ensure phar extension is not disabled
  lineinfile:
    path: "/etc/php/{{ php_version }}/{{ php_sapi }}/php.ini"
    regexp: "^;?phar\\.readonly\\s*="
    line: "phar.readonly = Off"
    backup: yes
  become: yes
  notify:
    - restart php-fpm services

- name: Remove any phar extension disable directives
  lineinfile:
    path: "/etc/php/{{ php_version }}/{{ php_sapi }}/php.ini"
    regexp: "^extension=phar$"
    state: absent
    backup: yes
  become: yes
  notify:
    - restart php-fpm services

- name: Verify tokenizer extension is available
  command: "php{{ php_version }} -m"
  register: php_modules_check
  changed_when: false
  become: yes

- name: Display tokenizer status
  debug:
    msg: |
      Tokenizer extension status: {{ 'AVAILABLE' if 'tokenizer' in php_modules_check.stdout else 'NOT FOUND' }}
      All loaded modules: {{ php_modules_check.stdout_lines | join(', ') }}
  
- name: Check PHP compilation info for tokenizer
  command: "php{{ php_version }} -i"
  register: php_info_check
  changed_when: false
  become: yes

- name: Display tokenizer compilation info
  debug:
    msg: |
      Tokenizer in phpinfo: {{ 'YES' if 'tokenizer' in php_info_check.stdout else 'NO' }}
      Configure Command includes tokenizer: {{ 'YES' if '--enable-tokenizer' in php_info_check.stdout else 'NO' }}