---
# Health check tasks for Laravel development environment

- name: Gather system facts
  setup:
  tags: ['health', 'system']

- name: Check service status
  service_facts:
  tags: ['health', 'services']

- name: Verify critical services are running
  fail:
    msg: "Critical service {{ item.name }} is not running"
  when: 
    - ansible_facts.services[item.name + '.service'] is defined
    - ansible_facts.services[item.name + '.service'].state != 'running'
  loop: "{{ health_check_services }}"
  tags: ['health', 'services']

- name: Test service configurations
  shell: "{{ item.config_test }}"
  loop: "{{ health_check_services }}"
  when: item.config_test is defined
  register: config_tests
  failed_when: config_tests.rc != 0
  changed_when: false
  tags: ['health', 'configuration']

- name: Check service ports
  wait_for:
    port: "{{ item.port }}"
    host: "127.0.0.1"
    timeout: "{{ health_check_timeout }}"
    state: started
  loop: "{{ health_check_services }}"
  when: item.port is defined
  tags: ['health', 'network']

- name: Check PHP-FPM services
  service:
    name: "php{{ item }}-fpm"
    state: started
  loop: "{{ health_check_php_versions }}"
  when: health_check_php_versions | length > 0
  check_mode: yes
  register: php_fpm_status
  tags: ['health', 'php']

- name: Verify directory permissions
  stat:
    path: "{{ item.path }}"
  loop: "{{ health_check_directories }}"
  register: directory_stats
  tags: ['health', 'filesystem']

- name: Check directory permission issues
  fail:
    msg: "Directory {{ item.item.path }} has incorrect permissions or ownership"
  when: 
    - item.stat.exists
    - (item.stat.mode != item.item.permissions or 
       item.stat.pw_name != item.item.owner or
       item.stat.gr_name != item.item.group)
  loop: "{{ directory_stats.results }}"
  tags: ['health', 'filesystem']

- name: Check disk usage
  shell: df -h / | awk 'NR==2 {print $5}' | sed 's/%//'
  register: disk_usage
  changed_when: false
  tags: ['health', 'performance']

- name: Warn about high disk usage
  debug:
    msg: "WARNING: Disk usage is {{ disk_usage.stdout }}% (threshold: {{ health_check_thresholds.disk_usage }}%)"
  when: disk_usage.stdout | int > health_check_thresholds.disk_usage
  tags: ['health', 'performance']

- name: Check memory usage
  shell: free | grep Mem | awk '{printf "%.0f", $3/$2 * 100.0}'
  register: memory_usage
  changed_when: false
  tags: ['health', 'performance']

- name: Warn about high memory usage
  debug:
    msg: "WARNING: Memory usage is {{ memory_usage.stdout }}% (threshold: {{ health_check_thresholds.memory_usage }}%)"
  when: memory_usage.stdout | int > health_check_thresholds.memory_usage
  tags: ['health', 'performance']

- name: Check system load
  shell: uptime | awk -F'load average:' '{print $2}' | awk '{print $1}' | sed 's/,//'
  register: load_average
  changed_when: false
  tags: ['health', 'performance']

- name: Warn about high system load
  debug:
    msg: "WARNING: System load is {{ load_average.stdout }} (threshold: {{ health_check_thresholds.load_average }})"
  when: load_average.stdout | float > health_check_thresholds.load_average
  tags: ['health', 'performance']

- name: Test HTTP endpoints
  uri:
    url: "{{ item }}"
    method: GET
    timeout: "{{ health_check_timeout }}"
    status_code: [200, 301, 302]
  loop: "{{ health_check_urls }}"
  when: health_check_urls | length > 0
  tags: ['health', 'http']

- name: Check Laravel application requirements
  block:
    - name: Check if Laravel sites exist
      find:
        paths: /var/www
        patterns: "artisan"
        file_type: file
        recurse: yes
      register: laravel_sites_found
      
    - name: Test Laravel sites
      shell: |
        cd {{ item.path | dirname }} && 
        php artisan --version
      loop: "{{ laravel_sites_found.files }}"
      register: laravel_tests
      failed_when: laravel_tests.rc != 0
      changed_when: false
      
  tags: ['health', 'laravel']

- name: Generate health check report
  template:
    src: health_report.j2
    dest: /tmp/health_check_report.txt
    mode: '0644'
  vars:
    check_timestamp: "{{ ansible_date_time.iso8601 }}"
    system_info:
      hostname: "{{ ansible_hostname }}"
      os: "{{ ansible_distribution }} {{ ansible_distribution_version }}"
      kernel: "{{ ansible_kernel }}"
      architecture: "{{ ansible_architecture }}"
      memory_total: "{{ ansible_memtotal_mb }}MB"
      cpu_cores: "{{ ansible_processor_cores }}"
    service_status: "{{ ansible_facts.services }}"
    performance_metrics:
      disk_usage: "{{ disk_usage.stdout }}%"
      memory_usage: "{{ memory_usage.stdout }}%"
      load_average: "{{ load_average.stdout }}"
  tags: ['health', 'report']

- name: Display health check summary
  debug:
    msg: |
      🏥 Health Check Summary ({{ ansible_date_time.iso8601 }})
      ================================================
      
      ✅ System Status:
      - Hostname: {{ ansible_hostname }}
      - OS: {{ ansible_distribution }} {{ ansible_distribution_version }}
      - Uptime: {{ ansible_uptime_seconds // 3600 }}h {{ (ansible_uptime_seconds % 3600) // 60 }}m
      
      📊 Performance:
      - Disk Usage: {{ disk_usage.stdout }}%
      - Memory Usage: {{ memory_usage.stdout }}%
      - Load Average: {{ load_average.stdout }}
      
      🔧 Services:
      {% for service in health_check_services %}
      - {{ service.name }}: {{ ansible_facts.services[service.name + '.service'].state | default('unknown') }}
      {% endfor %}
      
      📋 Full report saved to: /tmp/health_check_report.txt
  tags: ['health', 'summary']